#!/usr/bin/env python3
"""
Script d'installation automatis√© pour Vizaur-EDA-Tool
Ce script automatise tout le processus d'installation et de configuration.
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path

class Colors:
    """Codes couleur pour l'affichage dans le terminal"""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_header():
    """Affiche l'en-t√™te du script"""
    print(f"{Colors.HEADER}{Colors.BOLD}")
    print("=" * 60)
    print("üöÄ INSTALLATION AUTOMATIS√âE - VIZAUR-EDA-TOOL")
    print("=" * 60)
    print(f"{Colors.ENDC}")

def print_step(step, message):
    """Affiche une √©tape avec formatage"""
    print(f"\n{Colors.OKBLUE}[√âTAPE {step}]{Colors.ENDC} {Colors.BOLD}{message}{Colors.ENDC}")

def print_success(message):
    """Affiche un message de succ√®s"""
    print(f"{Colors.OKGREEN}‚úÖ {message}{Colors.ENDC}")

def print_warning(message):
    """Affiche un message d'avertissement"""
    print(f"{Colors.WARNING}‚ö†Ô∏è  {message}{Colors.ENDC}")

def print_error(message):
    """Affiche un message d'erreur"""
    print(f"{Colors.FAIL}‚ùå {message}{Colors.ENDC}")

def check_python_version():
    """V√©rifie la version de Python"""
    print_step(1, "V√©rification de la version Python")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print_error(f"Python 3.8+ requis. Version actuelle : {version.major}.{version.minor}")
        sys.exit(1)
    
    print_success(f"Python {version.major}.{version.minor}.{version.micro} d√©tect√©")
    return True

def check_requirements_file():
    """V√©rifie l'existence du fichier requirements.txt"""
    print_step(2, "V√©rification du fichier requirements.txt")
    
    if not os.path.exists("requirements.txt"):
        print_error("Fichier requirements.txt introuvable")
        sys.exit(1)
    
    print_success("Fichier requirements.txt trouv√©")
    return True

def create_virtual_environment():
    """Cr√©e l'environnement virtuel"""
    print_step(3, "Cr√©ation de l'environnement virtuel")
    
    venv_path = "venv"
    
    # Supprimer l'environnement virtuel existant s'il existe
    if os.path.exists(venv_path):
        print_warning("Environnement virtuel existant d√©tect√©, suppression...")
        try:
            shutil.rmtree(venv_path)
            print_success("Ancien environnement virtuel supprim√©")
        except Exception as e:
            print_error(f"Erreur lors de la suppression : {e}")
            return False
    
    # Cr√©er le nouvel environnement virtuel
    try:
        subprocess.run([sys.executable, "-m", "venv", venv_path], check=True)
        print_success("Environnement virtuel cr√©√© avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print_error(f"Erreur lors de la cr√©ation de l'environnement virtuel : {e}")
        return False

def get_activate_script():
    """Retourne le chemin du script d'activation selon l'OS"""
    system = platform.system().lower()
    
    if system == "windows":
        return "venv\\Scripts\\activate"
    else:
        return "venv/bin/activate"

def install_dependencies():
    """Installe les d√©pendances"""
    print_step(4, "Installation des d√©pendances")
    
    # D√©terminer le chemin de pip selon l'OS
    system = platform.system().lower()
    if system == "windows":
        pip_path = "venv\\Scripts\\pip"
    else:
        pip_path = "venv/bin/pip"
    
    try:
        # Mettre √† jour pip
        print("Mise √† jour de pip...")
        subprocess.run([pip_path, "install", "--upgrade", "pip"], check=True)
        
        # Installer les d√©pendances
        print("Installation des d√©pendances...")
        subprocess.run([pip_path, "install", "-r", "requirements.txt"], check=True)
        
        print_success("Toutes les d√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print_error(f"Erreur lors de l'installation des d√©pendances : {e}")
        return False

def setup_database():
    """Configure la base de donn√©es"""
    print_step(5, "Configuration de la base de donn√©es")
    
    # D√©terminer le chemin de manage.py
    manage_py = "manage.py"
    if not os.path.exists(manage_py):
        print_error("Fichier manage.py introuvable")
        return False
    
    # D√©terminer le chemin de python selon l'OS
    system = platform.system().lower()
    if system == "windows":
        python_path = "venv\\Scripts\\python"
    else:
        python_path = "venv/bin/python"
    
    try:
        # Ex√©cuter les migrations
        print("Ex√©cution des migrations...")
        subprocess.run([python_path, manage_py, "migrate"], check=True)
        
        print_success("Base de donn√©es configur√©e avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print_error(f"Erreur lors de la configuration de la base de donn√©es : {e}")
        return False

def create_superuser():
    """Propose de cr√©er un superutilisateur"""
    print_step(6, "Cr√©ation d'un superutilisateur (optionnel)")
    
    response = input("Voulez-vous cr√©er un superutilisateur ? (y/N): ").strip().lower()
    
    if response in ['y', 'yes', 'oui', 'o']:
        system = platform.system().lower()
        if system == "windows":
            python_path = "venv\\Scripts\\python"
        else:
            python_path = "venv/bin/python"
        
        try:
            subprocess.run([python_path, "manage.py", "createsuperuser"], check=True)
            print_success("Superutilisateur cr√©√© avec succ√®s")
        except subprocess.CalledProcessError as e:
            print_warning(f"Erreur lors de la cr√©ation du superutilisateur : {e}")
    else:
        print_warning("Cr√©ation du superutilisateur ignor√©e")

def launch_server():
    """Lance le serveur de d√©veloppement"""
    print_step(7, "Lancement du serveur de d√©veloppement")
    
    system = platform.system().lower()
    if system == "windows":
        python_path = "venv\\Scripts\\python"
    else:
        python_path = "venv/bin/python"
    
    print_success("Serveur en cours de lancement...")
    print(f"{Colors.OKCYAN}üåê L'application sera accessible sur : http://127.0.0.1:8000{Colors.ENDC}")
    print(f"{Colors.WARNING}üí° Appuyez sur Ctrl+C pour arr√™ter le serveur{Colors.ENDC}")
    
    try:
        subprocess.run([python_path, "manage.py", "runserver"])
    except KeyboardInterrupt:
        print(f"\n{Colors.OKGREEN}üëã Serveur arr√™t√©. Merci d'avoir utilis√© Vizaur-EDA-Tool !{Colors.ENDC}")
    except Exception as e:
        print_error(f"Erreur lors du lancement du serveur : {e}")

def main():
    """Fonction principale"""
    print_header()
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        return
    
    if not check_requirements_file():
        return
    
    # Installation
    if not create_virtual_environment():
        return
    
    if not install_dependencies():
        return
    
    if not setup_database():
        return
    
    # Configuration optionnelle
    create_superuser()
    
    # Lancement
    launch_server()

if __name__ == "__main__":
    main() 